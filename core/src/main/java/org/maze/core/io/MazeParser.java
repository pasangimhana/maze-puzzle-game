/* MazeParser.java */
/* Generated By:JavaCC: Do not edit this line. MazeParser.java */
package org.maze.core.io;

import org.maze.core.game.GameConfig;
import java.util.ArrayList;
import java.util.List;

public class MazeParser implements MazeParserConstants {
  public void parse(GameConfig gameConfig) throws ParseException {
    configuration(gameConfig);
  }

  final public void configuration(GameConfig gameConfig) throws ParseException {
    size(gameConfig);
    start(gameConfig);
    goal(gameConfig);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case SCRIPT:
      case PLUGIN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:{
        item(gameConfig);
        break;
        }
      case OBSTACLE:{
        obstacle(gameConfig);
        break;
        }
      case SCRIPT:{
        script(gameConfig);
        break;
        }
      case PLUGIN:{
        plugin(gameConfig);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void size(GameConfig gameConfig) throws ParseException {Token width, height;
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    width = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    height = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
gameConfig.setWidth(Integer.parseInt(width.image));
    gameConfig.setHeight(Integer.parseInt(height.image));
  }

  final public void start(GameConfig gameConfig) throws ParseException {Token x, y;
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    x = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    y = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
gameConfig.setStartX(Integer.parseInt(x.image));
    gameConfig.setStartY(Integer.parseInt(y.image));
  }

  final public void goal(GameConfig gameConfig) throws ParseException {Token x, y;
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    x = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    y = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
gameConfig.setGoalX(Integer.parseInt(x.image));
    gameConfig.setGoalY(Integer.parseInt(y.image));
  }

  final public void item(GameConfig gameConfig) throws ParseException {Token name, message;
  List positions = new ArrayList();
    jj_consume_token(ITEM);
    name = jj_consume_token(QUOTED_STRING);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    positionList(positions);
    jj_consume_token(MESSAGE);
    message = jj_consume_token(QUOTED_STRING);
    jj_consume_token(RBRACE);
gameConfig.addItem(name.image.substring(1, name.image.length() - 1), positions, message.image.substring(1, message.image.length() - 1));
  }

  final public void obstacle(GameConfig gameConfig) throws ParseException {List positions = new ArrayList();
  List requirements = new ArrayList();
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    positionList(positions);
    jj_consume_token(REQUIRES);
    requirementList(requirements);
    jj_consume_token(RBRACE);
gameConfig.addObstacle(positions, requirements);
  }

  final public void positionList(List positions) throws ParseException {Token x, y;
    jj_consume_token(LPAREN);
    x = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    y = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
positions.add(new GameConfig.Position(Integer.parseInt(x.image), Integer.parseInt(y.image)));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LPAREN);
      x = jj_consume_token(NUMBER);
      jj_consume_token(COMMA);
      y = jj_consume_token(NUMBER);
      jj_consume_token(RPAREN);
positions.add(new GameConfig.Position(Integer.parseInt(x.image), Integer.parseInt(y.image)));
    }
  }

  final public void requirementList(List requirements) throws ParseException {Token requirement;
    requirement = jj_consume_token(QUOTED_STRING);
requirements.add(requirement.image.substring(1, requirement.image.length() - 1));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      requirement = jj_consume_token(QUOTED_STRING);
requirements.add(requirement.image.substring(1, requirement.image.length() - 1));
    }
  }

  final public void script(GameConfig gameConfig) throws ParseException {Token content;
    jj_consume_token(SCRIPT);
    jj_consume_token(LBRACE);
token_source.SwitchTo(IN_SCRIPT);
    content = jj_consume_token(SCRIPT_CONTENT);
token_source.SwitchTo(DEFAULT);
    jj_consume_token(RBRACE);
gameConfig.addScript(content.image.trim());
  }

  final public void plugin(GameConfig gameConfig) throws ParseException {Token pluginName;
    jj_consume_token(PLUGIN);
    pluginName = jj_consume_token(IDENTIFIER);
gameConfig.addPlugin(pluginName.image);
  }

  /** Generated Token Manager. */
  public MazeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf00,0xf00,0x80000,0x80000,};
   }

  /** Constructor with InputStream. */
  public MazeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MazeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MazeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MazeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MazeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new MazeParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MazeParser(MazeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MazeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
